<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="CodeQualityTests" tests="1" skipped="0" failures="1" errors="0" timestamp="2022-10-08T15:40:41" hostname="Faruks-MBP" time="0.294">
  <properties/>
  <testcase name="codeQuality()" classname="CodeQualityTests" time="0.294">
    <failure message="org.opentest4j.AssertionFailedError: Max amount (5) of quality issues exceeded:23 ==&gt; expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: Max amount (5) of quality issues exceeded:23 ==&gt; expected: &lt;true&gt; but was: &lt;false&gt;
	at app//org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)
	at app//org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:40)
	at app//org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:193)
	at app//CodeQualityTests.codeQuality(CodeQualityTests.java:70)
	at java.base@17.0.4.1/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base@17.0.4.1/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base@17.0.4.1/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base@17.0.4.1/java.lang.reflect.Method.invoke(Method.java:568)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
	at app//org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at app//org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at app//org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)
	at java.base@17.0.4.1/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)
	at java.base@17.0.4.1/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
	at java.base@17.0.4.1/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base@17.0.4.1/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base@17.0.4.1/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base@17.0.4.1/java.lang.reflect.Method.invoke(Method.java:568)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <system-out><![CDATA[3 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/controller/Controller.java
text:line: 38 column: column:7 
Fall through from previous branch of the switch statement.

text:line: 49 column: column:5 
switch without "default" clause.

text:line: 103 column: column:7 
Fall through from previous branch of the switch statement.

0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/controller/MemberController.java
0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/controller/App.java
0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/Contract.java
0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/MemberId.java
0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/Time.java
0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/Member.java
0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/Registry.java
0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/TimeAdvancedObserver.java
0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/Item.java
2 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/view/ConsoleUi.java
text:line: 82 column: column:5 
Distance between variable 'firstName' declaration and its first usage is 4, but allowed 3.  Consider 
  making that variable final if you still need to store its value in advance (before method calls 
  that might have side effects on the original value).

text:line: 283 column: column:5 
Distance between variable 'itemName' declaration and its first usage is 4, but allowed 3.  Consider 
  making that variable final if you still need to store its value in advance (before method calls 
  that might have side effects on the original value).

0 FindBugs Issues in model/Time.java
0 FindBugs Issues in model/MemberId.java
0 FindBugs Issues in model/Contract.java
4 FindBugs Issues in model/Registry.java
text:lines: 17-129 
getMembers() may expose internal representation by returning Registry.members 
May expose internal representation by returning reference to mutable object 
Returning a reference to a mutable object value stored in one of the object's fields exposes the 
  internal representation of the object. If instances are accessed by untrusted code, and unchecked 
  changes to the mutable object would compromise security or other important properties, you will 
  need to do something different. Returning a new copy of the object is better approach in many 
  situations.

text:lines: 17-129 
Comparison of String parameter using == or != in getMember(String) 
Comparison of String parameter using == or != 
This code compares a java.lang.String parameter for reference equality using the == or != operators. 
  Requiring callers to pass only String constants or interned strings to a method is unnecessarily 
  fragile, and rarely leads to measurable performance gains. Consider using the equals(Object) 
  method instead.

text:lines: 17-129 
Unused field: console 
Unused field 
This field is never used. Consider removing it from the class.

text:lines: 17-129 
Unused field: controller 
Unused field 
This field is never used. Consider removing it from the class.

1 FindBugs Issues in controller/App.java
text:lines: 9-23 
Dead store to mmc in main(String[]) 
Dead store to local variable 
This instruction assigns a value to a local variable, but the value is not read or used in any 
  subsequent instruction. Often, this indicates an error, because the value computed is never used. 
 
Note that Sun's javac compiler often generates dead stores for final local variables. Because 
  SpotBugs is a bytecode-based tool, there is no easy way to eliminate these false positives.

2 FindBugs Issues in view/ConsoleUi.java
text:lines: 16-352 
Dead store to itemId in showItemDetails(Item, int) 
Dead store to local variable 
This instruction assigns a value to a local variable, but the value is not read or used in any 
  subsequent instruction. Often, this indicates an error, because the value computed is never used. 
 
Note that Sun's javac compiler often generates dead stores for final local variables. Because 
  SpotBugs is a bytecode-based tool, there is no easy way to eliminate these false positives.

text:lines: 16-352 
new view.ConsoleUi(Scanner) may expose internal representation by storing an externally mutable 
  object into ConsoleUi.input 
May expose internal representation by incorporating reference to mutable object 
This code stores a reference to an externally mutable object into the internal representation of the 
  object. If instances are accessed by untrusted code, and unchecked changes to the mutable object 
  would compromise security or other important properties, you will need to do something different. 
  Storing a copy of the object is better approach in many situations.

0 FindBugs Issues in model/Item.java
3 FindBugs Issues in controller/Controller.java
text:lines: 13-106 
Found reliance on default encoding in new controller.Controller(ConsoleUi, Registry): new 
  java.util.Scanner(InputStream) 
Reliance on default encoding 
Found a call to a method which will perform a byte to String (or String to byte) conversion, and 
  will assume that the default platform encoding is suitable. This will cause the application 
  behavior to vary between platforms. Use an alternative API and specify a charset name or Charset 
  object explicitly.

text:lines: 13-106 
new controller.Controller(ConsoleUi, Registry) may expose internal representation by storing an 
  externally mutable object into Controller.registry 
May expose internal representation by incorporating reference to mutable object 
This code stores a reference to an externally mutable object into the internal representation of the 
  object. If instances are accessed by untrusted code, and unchecked changes to the mutable object 
  would compromise security or other important properties, you will need to do something different. 
  Storing a copy of the object is better approach in many situations.

text:lines: 13-106 
Switch statement found in memMenu() where default case is missing 
Switch statement found where default case is missing 
   
 
   This method contains a switch statement where default case is missing. 
  Usually you need to provide a default case. 
  Because the analysis only looks at the generated bytecode, this warning can be incorrect triggered 
  if 
the default case is at the end of the switch statement and the switch statement doesn't contain 
  break statements for other 
cases.

0 FindBugs Issues in model/TimeAdvancedObserver.java
8 FindBugs Issues in controller/MemberController.java
text:lines: 18-271 
new controller.MemberController(ConsoleUi, Registry) may expose internal representation by storing 
  an externally mutable object into MemberController.registry 
May expose internal representation by incorporating reference to mutable object 
This code stores a reference to an externally mutable object into the internal representation of the 
  object. If instances are accessed by untrusted code, and unchecked changes to the mutable object 
  would compromise security or other important properties, you will need to do something different. 
  Storing a copy of the object is better approach in many situations.

text:lines: 18-271 
Read of unwritten field member in deleteItemLended(Item) 
Read of unwritten field 
The program is dereferencing a field that does not seem to ever have a non-null value written to it. 
  Unless the field is initialized via some mechanism not seen by the analysis, dereferencing this 
  value will generate a null pointer exception.

text:lines: 18-271 
Read of unwritten field member in deleteItemOwned(Item) 
Read of unwritten field 
The program is dereferencing a field that does not seem to ever have a non-null value written to it. 
  Unless the field is initialized via some mechanism not seen by the analysis, dereferencing this 
  value will generate a null pointer exception.

text:lines: 18-271 
Read of unwritten field member in showMemberDetails() 
Read of unwritten field 
The program is dereferencing a field that does not seem to ever have a non-null value written to it. 
  Unless the field is initialized via some mechanism not seen by the analysis, dereferencing this 
  value will generate a null pointer exception.

text:lines: 18-271 
Nullcheck of input at line 197 of value previously dereferenced in isNull(String) 
Nullcheck of value previously dereferenced 
A value is checked here to see whether it is null, but this value cannot be null because it was 
  previously dereferenced and if it were null a null pointer exception would have occurred at the 
  earlier dereference. Essentially, this code and the previous dereference disagree as to whether 
  this value is allowed to be null. Either the check is redundant or the previous dereference is 
  erroneous.

text:lines: 18-271 
Return value of model.Registry.getMember(String) ignored, but method has no side effect 
Return value of method without side effect is ignored 
This code calls a method and ignores the return value. However our analysis shows that the method 
  (including its implementations in subclasses if any) does not produce any effect other than return 
  value. Thus this call can be removed. 
 
We are trying to reduce the false positives as much as possible, but in some cases this warning 
  might be wrong. Common false-positive cases include: 
 
- The method is designed to be overridden and produce a side effect in other projects which are out 
  of the scope of the analysis. 
 
- The method is called to trigger the class loading which may have a side effect. 
 
- The method is called just to get some exception. 
 
If you feel that our assumption is incorrect, you can use a @CheckReturnValue annotation to instruct 
  SpotBugs that ignoring the return value of this method is acceptable.

text:lines: 18-271 
Return value of Object.toString() ignored, but method has no side effect 
Return value of method without side effect is ignored 
This code calls a method and ignores the return value. However our analysis shows that the method 
  (including its implementations in subclasses if any) does not produce any effect other than return 
  value. Thus this call can be removed. 
 
We are trying to reduce the false positives as much as possible, but in some cases this warning 
  might be wrong. Common false-positive cases include: 
 
- The method is designed to be overridden and produce a side effect in other projects which are out 
  of the scope of the analysis. 
 
- The method is called to trigger the class loading which may have a side effect. 
 
- The method is called just to get some exception. 
 
If you feel that our assumption is incorrect, you can use a @CheckReturnValue annotation to instruct 
  SpotBugs that ignoring the return value of this method is acceptable.

text:lines: 18-271 
Unwritten field: member 
Unwritten field 
This field is never written. All reads of it will return the default value. Check for errors (should 
  it have been initialized?), or remove it if it is useless.

0 FindBugs Issues in model/Member.java
]]></system-out>
  <system-err><![CDATA[[Fatal Error] :8:9: The element type "p" must be terminated by the matching end-tag "</p>".
The element type "p" must be terminated by the matching end-tag "</p>".
parsing of text failed possibly due to bad html/xml formatting for, start text --->Switch statement found where default case is missing
    

  <p> This method contains a switch statement where default case is missing.
  Usually you need to provide a default case.</p>
  <p>Because the analysis only looks at the generated bytecode, this warning can be incorrect triggered if
the default case is at the end of the switch statement and the switch statement doesn't contain break statements for other
cases.<--- end text
]]></system-err>
</testsuite>

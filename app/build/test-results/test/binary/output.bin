h0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/controller/MemberController.java
[0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/controller/App.java
[0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/Contract.java
[0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/MemberId.java
W0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/Time.java
Y0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/Member.java
[0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/Registry.java
g0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/TimeAdvancedObserver.java
W0 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/model/Item.java
[1 CheckStyle Issues in /Users/fy/Documents/1DV607/a2/app/src/main/java/view/ConsoleUi.java
 text:line: 28 column: column:5 
fDistance between variable 'firstName' declaration and its first usage is 4, but allowed 3.  Consider 
c  making that variable final if you still need to store its value in advance (before method calls 
7  that might have side effects on the original value).

%0 FindBugs Issues in model/Time.java
)0 FindBugs Issues in model/MemberId.java
)0 FindBugs Issues in model/Contract.java
)3 FindBugs Issues in model/Registry.java
text:lines: 18-117 
OgetMembers() may expose internal representation by returning Registry.members 
MMay expose internal representation by returning reference to mutable object 
bReturning a reference to a mutable object value stored in one of the object's fields exposes the 
e  internal representation of the object. If instances are accessed by untrusted code, and unchecked 
c  changes to the mutable object would compromise security or other important properties, you will 
a  need to do something different. Returning a new copy of the object is better approach in many 
  situations.

text:lines: 18-117 
DComparison of String parameter using == or != in getMember(String) 
/Comparison of String parameter using == or != 
fThis code compares a java.lang.String parameter for reference equality using the == or != operators. 
d  Requiring callers to pass only String constants or interned strings to a method is unnecessarily 
`  fragile, and rarely leads to measurable performance gains. Consider using the equals(Object) 
  method instead.

text:lines: 18-117 
Unused field: controller 
Unused field 
?This field is never used. Consider removing it from the class.

)0 FindBugs Issues in controller/App.java
)1 FindBugs Issues in view/ConsoleUi.java
text:lines: 16-215 
anew view.ConsoleUi(Scanner) may expose internal representation by storing an externally mutable 
  object into ConsoleUi.input 
QMay expose internal representation by incorporating reference to mutable object 
fThis code stores a reference to an externally mutable object into the internal representation of the 
d  object. If instances are accessed by untrusted code, and unchecked changes to the mutable object 
e  would compromise security or other important properties, you will need to do something different. 
F  Storing a copy of the object is better approach in many situations.

%0 FindBugs Issues in model/Item.java
50 FindBugs Issues in model/TimeAdvancedObserver.java
68 FindBugs Issues in controller/MemberController.java
text:lines: 16-201 
dnew controller.MemberController(ConsoleUi, Registry) may expose internal representation by storing 
?  an externally mutable object into MemberController.registry 
QMay expose internal representation by incorporating reference to mutable object 
fThis code stores a reference to an externally mutable object into the internal representation of the 
d  object. If instances are accessed by untrusted code, and unchecked changes to the mutable object 
e  would compromise security or other important properties, you will need to do something different. 
F  Storing a copy of the object is better approach in many situations.

text:lines: 16-201 
:Read of unwritten field member in deleteItemLended(Item) 
Read of unwritten field 
fThe program is dereferencing a field that does not seem to ever have a non-null value written to it. 
c  Unless the field is initialized via some mechanism not seen by the analysis, dereferencing this 
0  value will generate a null pointer exception.

text:lines: 16-201 
9Read of unwritten field member in deleteItemOwned(Item) 
Read of unwritten field 
fThe program is dereferencing a field that does not seem to ever have a non-null value written to it. 
c  Unless the field is initialized via some mechanism not seen by the analysis, dereferencing this 
0  value will generate a null pointer exception.

text:lines: 16-201 
7Read of unwritten field member in showMemberDetails() 
Read of unwritten field 
fThe program is dereferencing a field that does not seem to ever have a non-null value written to it. 
c  Unless the field is initialized via some mechanism not seen by the analysis, dereferencing this 
0  value will generate a null pointer exception.

text:lines: 16-201 
SNullcheck of input at line 156 of value previously dereferenced in isNull(String) 
,Nullcheck of value previously dereferenced 
aA value is checked here to see whether it is null, but this value cannot be null because it was 
c  previously dereferenced and if it were null a null pointer exception would have occurred at the 
c  earlier dereference. Essentially, this code and the previous dereference disagree as to whether 
b  this value is allowed to be null. Either the check is redundant or the previous dereference is 
  erroneous.

text:lines: 16-201 
YReturn value of model.Registry.getMember(String) ignored, but method has no side effect 
7Return value of method without side effect is ignored 
cThis code calls a method and ignores the return value. However our analysis shows that the method 
f  (including its implementations in subclasses if any) does not produce any effect other than return 
)  value. Thus this call can be removed. 
 
aWe are trying to reduce the false positives as much as possible, but in some cases this warning 
8  might be wrong. Common false-positive cases include: 
 
e- The method is designed to be overridden and produce a side effect in other projects which are out 
!  of the scope of the analysis. 
 
S- The method is called to trigger the class loading which may have a side effect. 
 
4- The method is called just to get some exception. 
 
fIf you feel that our assumption is incorrect, you can use a @CheckReturnValue annotation to instruct 
H  SpotBugs that ignoring the return value of this method is acceptable.

text:lines: 16-201 
JReturn value of Object.toString() ignored, but method has no side effect 
7Return value of method without side effect is ignored 
cThis code calls a method and ignores the return value. However our analysis shows that the method 
f  (including its implementations in subclasses if any) does not produce any effect other than return 
)  value. Thus this call can be removed. 
 
aWe are trying to reduce the false positives as much as possible, but in some cases this warning 
8  might be wrong. Common false-positive cases include: 
 
e- The method is designed to be overridden and produce a side effect in other projects which are out 
!  of the scope of the analysis. 
 
S- The method is called to trigger the class loading which may have a side effect. 
 
4- The method is called just to get some exception. 
 
fIf you feel that our assumption is incorrect, you can use a @CheckReturnValue annotation to instruct 
H  SpotBugs that ignoring the return value of this method is acceptable.

text:lines: 16-201 
Unwritten field: member 
Unwritten field 
fThis field is never written. All reads of it will return the default value. Check for errors (should 
=  it have been initialized?), or remove it if it is useless.

'0 FindBugs Issues in model/Member.java

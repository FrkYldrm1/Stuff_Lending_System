<?xml version="1.0" encoding="utf-8"?>
<testsuite package="org.spotbugs" time="0" tests="14" errors="13" name="findbugs">
<testcase time="0" name="model/domain/Item.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 18-239 
new model.domain.Item(String, String, int, int, Boolean, int, String, 
  String, String) uses the same code for two branches 
Method uses the same code for two branches 
This method uses the same code to implement two branches of a conditional 
  branch. Check to ensure that this isn't a coding mistake.
----------------
lines: 18-239 
Call to equals(null) in new model.domain.Item(String, String, int, int, 
  Boolean, int, String, String, String) 
Call to equals(null) 
This method calls equals(Object), passing a null value as the argument. 
  According to the contract of the equals() method, this call should always 
  return false.
----------------
lines: 18-239 
Unread field: itemId 
Unread field 
This field is never read. Consider removing it from the class.
----------------
lines: 18-239 
Unread field: owner 
Unread field 
This field is never read. Consider removing it from the class.
----------------
lines: 18-239 
Unused public or protected field: itemClass 
Unused public or protected field 
This field is never used. The field is public or protected, so perhaps it 
  is intended to be used with classes not seen as part of the analysis. If 
  not, consider removing it from the class.
----------------
]]></failure>
</testcase><testcase time="0" name="model/domain/MemberId.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 9-41 
Unread field: dateCreated 
Unread field 
This field is never read. Consider removing it from the class.
----------------
]]></failure>
</testcase><testcase time="0" name="view/ConsoleUi.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 19-408 
byeBye() invokes System.exit(...), which shuts down the entire virtual 
  machine 
Method invokes System.exit(...) 
Invoking System.exit shuts down the entire Java virtual machine. This 
  should only been done when it is appropriate. Such calls make it hard or 
  impossible for your code to be invoked by other code. Consider throwing a 
  RuntimeException instead.
----------------
lines: 19-408 
new view.ConsoleUi(Scanner) may expose internal representation by storing 
  an externally mutable object into ConsoleUi.input 
May expose internal representation by incorporating reference to mutable 
  object 
This code stores a reference to an externally mutable object into the 
  internal representation of the object. If instances are accessed by 
  untrusted code, and unchecked changes to the mutable object would 
  compromise security or other important properties, you will need to do 
  something different. Storing a copy of the object is better approach in 
  many situations.
----------------
lines: 19-408 
setInput(Scanner) may expose internal representation by storing an 
  externally mutable object into ConsoleUi.input 
May expose internal representation by incorporating reference to mutable 
  object 
This code stores a reference to an externally mutable object into the 
  internal representation of the object. If instances are accessed by 
  untrusted code, and unchecked changes to the mutable object would 
  compromise security or other important properties, you will need to do 
  something different. Storing a copy of the object is better approach in 
  many situations.
----------------
lines: 19-408 
The method name SelectMemberDelete() doesn't start with a lower case letter 
Method names should start with a lower case letter 
Methods should be verbs, in mixed case with the first letter lowercase, 
  with the first letter of each internal word capitalized.
----------------
]]></failure>
</testcase><testcase time="0" name="controller/Controller.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 15-125 
Switch statement found in mainMenu() where one case falls through to the 
  next case 
Switch statement found where one case falls through to the next case 
This method contains a switch statement where one case branch will fall 
  through to the next case. Usually you need to end this case with a break 
  or return.
----------------
lines: 15-125 
Switch statement found in memMenu() where one case falls through to the 
  next case 
Switch statement found where one case falls through to the next case 
This method contains a switch statement where one case branch will fall 
  through to the next case. Usually you need to end this case with a break 
  or return.
----------------
]]></failure>
</testcase><testcase time="0" name="controller/MemberController.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 19-303 
Nullcheck of input at line 170 of value previously dereferenced in 
  check(String) 
Nullcheck of value previously dereferenced 
A value is checked here to see whether it is null, but this value cannot be 
  null because it was previously dereferenced and if it were null a null 
  pointer exception would have occurred at the earlier dereference. 
  Essentially, this code and the previous dereference disagree as to 
  whether this value is allowed to be null. Either the check is redundant 
  or the previous dereference is erroneous.
----------------
]]></failure>
</testcase><testcase time="0" name="model/domain/Registry.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/persistence/IMapper.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="controller/App.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/domain/Contract.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/domain/Member.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/domain/Time.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/TimeAdvancedObserver.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/persistence/SqlMapper.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/persistence/Persistence.java" classname="FindBugs Issues">
</testcase></testsuite>
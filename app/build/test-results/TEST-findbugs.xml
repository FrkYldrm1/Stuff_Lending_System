<?xml version="1.0" encoding="utf-8"?>
<testsuite package="org.spotbugs" time="0" tests="17" errors="4" name="findbugs">
<testcase time="0" name="model/domain/Item.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 19-263 
new model.domain.Item(String, String, int, int, Boolean, int, String, 
  String, Item$CategoryEnum) uses the same code for two branches 
Method uses the same code for two branches 
This method uses the same code to implement two branches of a conditional 
  branch. Check to ensure that this isn't a coding mistake.
----------------
lines: 19-263 
Call to equals(null) in new model.domain.Item(String, String, int, int, 
  Boolean, int, String, String, Item$CategoryEnum) 
Call to equals(null) 
This method calls equals(Object), passing a null value as the argument. 
  According to the contract of the equals() method, this call should always 
  return false.
----------------
]]></failure>
</testcase><testcase time="0" name="model/domain/MemberId.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="view/EnumChoices.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="view/ConsoleUi.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 19-501 
byeBye() invokes System.exit(...), which shuts down the entire virtual 
  machine 
Method invokes System.exit(...) 
Invoking System.exit shuts down the entire Java virtual machine. This 
  should only been done when it is appropriate. Such calls make it hard or 
  impossible for your code to be invoked by other code. Consider throwing a 
  RuntimeException instead.
----------------
]]></failure>
</testcase><testcase time="0" name="controller/Controller.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/domain/TimeAdvancedObserver.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="view/MemberEnum.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="controller/MemberController.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 17-336 
Nullcheck of input at line 218 of value previously dereferenced in 
  check(String) 
Nullcheck of value previously dereferenced 
A value is checked here to see whether it is null, but this value cannot be 
  null because it was previously dereferenced and if it were null a null 
  pointer exception would have occurred at the earlier dereference. 
  Essentially, this code and the previous dereference disagree as to 
  whether this value is allowed to be null. Either the check is redundant 
  or the previous dereference is erroneous.
----------------
]]></failure>
</testcase><testcase time="0" name="model/domain/Registry.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="controller/App.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/domain/Contract.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/domain/Member.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/domain/Time.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/persistence/Imapper.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/persistence/SqlMapper.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="view/ItemEnum.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/persistence/Persistence.java" classname="FindBugs Issues">
</testcase></testsuite>